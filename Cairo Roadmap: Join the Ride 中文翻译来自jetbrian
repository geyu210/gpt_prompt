Cairo 继续发展。为了社区的便利，我们已经创建了一个公开的板块，描述了即将到来的酷炫功能。新的合约语法很快就会随着 Starknet alpha v0.12.0 的推出而启动，这需要最小的代码更改，并且大大丰富了智能合约语言。随着 Cairo 1.1.0 在 Starknet Mainnet 上的使用以及 v2 即将到达 Starknet，我们在语言的成熟度上达到了重要的里程碑。在 docs、book 和 Starknet discord 之间，你应该有足够的资源去开始并从 Cairo 0 迁移。
##简介 自从它的早期阿尔法版开始，Cairo v1 已经发展得非常显著，达到了与 Cairo 0 的特性对等，并且在顶部积累了新的特性（现在已经有基本的循环，还有更多的能力正在进行中）。我们在这篇文章中的目标是穿透更多关于 Cairo 短期路线图的光线：目前正在进行的工作以及开发人员在未来的几周和几个月内可以期待的情况。在将来，你可以通过在 Github 上跟踪 cairo-roadmap 板块来及时了解语言的最新发展或计划。
##为什么选择 Cairo？ 随着高级语言的重大进步，我们认为强调 Cairo 的根本益处和我们为什么认为它是区块链扩展未来的基础是很重要的。
从一开始，Cairo 就是为了成为编写可证明程序最有效的语言而设计的。如原始论文所述，Cairo VM 的架构是为了高效生成 Cairo 程序执行的 STARK 证明而设计的，使其成为 Validity Rollups 的理想基础。 我们现在拥有的 Cairo v2，它是新的像 rust 的语言，是基于这些基础上构建的，但是设计用来服务广大的开发者社区，无论是在人体工程学，安全性，学习和编写的简易性方面。在过去的两年中，Cairo 经历的演变，使之从一种小众的低级语言转变为一种高级的开发者友好的语言，提供了在证明和扩展效率方面的优势。
#只说 Cairo 不再说 “Cairo 1 —编译器版本 vX.Y.Z”。从现在开始，只说 Cairo。Yai！
随着新的 Cairo 编译器，我们遵循了语义版本控制标准；也就是说，编译器版本由三位数字组成，最重要的数字变化表示破坏性的变化。有了下一个 Cairo 版本，我们在智能合约语法（在帖子后面描述）中有了破坏性的变化，所以正确的事情是将版本增加到 Cairo v2。为了避免笨重的记数法，我们将停止说 Cairo 1，从现在开始，用（唯一的）编译器版本来确定语言的版本。原始的语言，将来可能在 Starknet 之外的不同环境中使用，将被称为 “Cairo 0”。
#Cairo接下来会怎样？ 在下面的部分，我们将过一遍语言即将发生的主要发展，以及它们是如何影响 Cairo 开发者体验的。
#即将到来的功能 虽然与 Cairo 0 的功能对等是一个重要的里程碑，但这绝对不是最终的目标。高级语言总是可以改进的，还有更多的功能正在进行中。你可以查看路线图来看到正在工作的功能并跟踪待办事项。一些值得一提的东西是：
组件：新合约语法的下一阶段，允许合约导入在外部库中定义的组件。 Keccak 和 Secp-k1：已经在 Cairo v2 中包含，这些将允许在即将到来的 Starknet 版本上验证 Ethereum 签名。 支持有符号整数。 Secp-r1 曲线操作：这将允许使用原生硬件签署事务，这将大大简化与 Starknet 交互的 UX。 字符串：用于（长）字符串的原生类型，允许标准字符串操作。这是一个基本的功能，也是 NFT 和游戏项目要求颇高的。 迭代器：这些将允许我们丰富循环语法，并且更方便地遍历数组/跨度。 Cairo v2 —新的合约语法 Starknet的智能合约的当前语法主要继承自之前的 Cairo 0 设计。这种设计存在我们希望解决的问题。我们迁移到新语法的目标是通过使合约的行为更显式来增加安全性。通过给合约的外部函数、存储和事件引入更多的结构，我们可以大大降低出现bug的几率。这将有助于保护协议免受可能的黑客攻击和损失资金。此外，新的语法允许我们引入可扩展性，这是社区高度请求的一个功能，该功能允许开发者方便地使用在外部库中编写的组件。 新的语法需要破坏性的改变。虽然我们在这个阶段尽可能地避免破坏性的变化，但经过内部和社区讨论后我们确定这是未来将有所回报的正确路径。
这些更改在社区论坛中发表的更技术性的帖子中进行了详细讨论（请参阅它以获得即将到来的变化的全面概述）。在这里我们只想强调，只有你的合约的“最外层”（定义外部函数和事件）需要修改。你现有的 Cairo v1 代码只需要进行少量的调整（见文档以获取快速迁移指南）。另一方面，新语法的好处非常重要：使用来自外部库的组件（在进行大型项目时是关键的功能）将变得平常，不再需要特别的解决方案。
后向兼容性保证 帖子中描述的即将到来的变化（尤其是新的合约语法）将意味着语言中的破坏性变化。尽管遵循 Cairo v2，破坏性的变化大部份已经完成，但要承诺并行兼容性还为时过早。话虽这么说，基于 Starknet 的项目开发智能合约需要稳定性和仔细的审核，这也是我们重要的考虑因素。为了解决这些问题，我们提供以下保证稳定性的保障：
任何声明在Starknet上的类将像以前一样继续工作，而且不会受到语言变化的影响 任何在 Starknet 上部署的合约将像以前一样继续工作，而且不会受到语言变化的影响 对于每个破坏性的语言升级，之前版本写的合约将至少在接下来的六个月中继续在 Starknet 上声明。 例如，如果你正在开发我们的项目（或者快要部署/审核阶段）使用 Cairo 版本X，而 Cairo Y发布带有破坏性的改变，使用版本 X 写的合约仍会在未来至少六个月内被 Starknet 所接受。也就是说，你有至少六个月的时间来部署你的合约在 Starknet，此时它们将永远受到 1 和 2 点的保护。
我应该什么时候迁移？ 新的合约语法已经发布（并且在即将推出的 v0.12.0 中会提供给 Starknet），大部分的破坏性改变已经完成，Cairo 现在已经足够稳定且丰富，足以支持复杂的应用，并且从已有的 Cairo 0 逻辑迁移。此外，Starknet上的向后兼容性保证确保即使语言中有破坏性改变，你也会有足够的时间（至少六个月）来完成开发、审核和部署你的合同。
总结 Cairo继续发展，已经到达一个地步，大大超越了原始的语言。如果你还没有，现在是参与的时候了。我们欢迎开发者社区积极参与讨论，无论是直接在编译器 repo 上提出问题，还是在 cairo discord 频道或 Starknet 社区论坛上发帖。希望这篇文章（以及它的更技术性的配对）帮助我们在预期的变化上洒一些光，并消除对 Cairo 未来的大部分疑虑。